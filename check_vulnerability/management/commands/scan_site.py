#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
from lxml import html
import time
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException
from django.core.management.base import BaseCommand
from check_vulnerability.utils import get_driver


class Command(BaseCommand):
    help = 'The Zen of Python'

    def handle(self, *args, **options):
        shit()


def get_html_tree_and_js_engine(url):
    is_js_engine = True

    site_response = requests.get(url)

    tree = html.fromstring(site_response.text)

    if len(tree.xpath('//div')) > 3:
        is_js_engine = False

    return tree, is_js_engine

    pass


def shit():
    url = 'https://xss-game.appspot.com/level2/frame'
    all_links_xpath = '//a'
    html_tree, is_js_engine = get_html_tree_and_js_engine(url)
    if not is_js_engine:
        pass
        print('is not js_engine')
        # return
        # all_links = [x for x in html_tree.xpath(all_links_xpath) if not x.attrib.get('href').startswith('http')]

    # import ipdb; ipdb.set_trace()

    # driver = get_driver()
    # driver.get(url)
    # _load_site()
    #
    # all_form_elements = driver.find_elements_by_xpath('//form')
    #
    # all_inputs_by_form = [x.find_elements_by_xpath('./*') for x in all_form_elements]
    #
    # for all_inputs in all_inputs_by_form:
    #     has_xss = False
    #
    #     text_input, submit = separate_text_and_submit_input(all_inputs)
    #     # import ipdb; ipdb.set_trace()
    #
    #     # import ipdb; ipdb.set_trace()
    #     xss_injection = ['''<script>alert('xss')</script>''', '''<img src="noimage" onerror="alert('xss')">''']
    #
    #     for injection in xss_injection:
    #         for x in text_input:
    #             if x.is_displayed():
    #                 x.click()
    #                 x.send_keys(injection)
    #
    #         for x in submit:
    #             x.click()
    #             has_xss = page_has_alert(driver)

    from check_vulnerability.utils import SeleniumXSS

    shit = SeleniumXSS(url)
    xss_input = shit.find_xss()

    import ipdb;
    ipdb.set_trace()
    print()
    return

    all_links_elements = driver.find_elements_by_xpath(all_links_xpath)
    host = get_host(url)
    all_links_by_host = [x for x in
                         [kk for kk in all_links_elements if kk.get_attribute('href') is not None]
                         if host in x.get_attribute('href')]

    # for x in sick:
    #     print(x.get_attribute('href')) if x.tag_name == 'a' else None
    print('hello world')
